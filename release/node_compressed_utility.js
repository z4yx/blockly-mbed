// Do not edit this file; automatically generated by nodejs node_compress_block.js
 'use strict';

Blockly.Msg.en={};Blockly.Msg.ADD_COMMENT="Add Comment";Blockly.Msg.CANNOT_DELETE_VARIABLE_PROCEDURE="Can't delete the variable '%1' because it's part of the definition of the function '%2'";Blockly.Msg.CHANGE_VALUE_TITLE="Change value:";Blockly.Msg.CLEAN_UP="Clean up Blocks";Blockly.Msg.COLLAPSE_ALL="Collapse Blocks";Blockly.Msg.COLLAPSE_BLOCK="Collapse Block";Blockly.Msg.COLOUR_BLEND_COLOUR1="colour 1";Blockly.Msg.COLOUR_BLEND_COLOUR2="colour 2";
Blockly.Msg.COLOUR_BLEND_HELPURL="http://meyerweb.com/eric/tools/color-blend/";Blockly.Msg.COLOUR_BLEND_RATIO="ratio";Blockly.Msg.COLOUR_BLEND_TITLE="blend";Blockly.Msg.COLOUR_BLEND_TOOLTIP="Blends two colours together with a given ratio (0.0 - 1.0).";Blockly.Msg.COLOUR_PICKER_HELPURL="https://en.wikipedia.org/wiki/Color";Blockly.Msg.COLOUR_PICKER_TOOLTIP="Choose a colour from the palette.";Blockly.Msg.COLOUR_RANDOM_HELPURL="http://randomcolour.com";Blockly.Msg.COLOUR_RANDOM_TITLE="random colour";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP="Choose a colour at random.";Blockly.Msg.COLOUR_RGB_BLUE="blue";Blockly.Msg.COLOUR_RGB_GREEN="green";Blockly.Msg.COLOUR_RGB_HELPURL="http://www.december.com/html/spec/colorper.html";Blockly.Msg.COLOUR_RGB_RED="red";Blockly.Msg.COLOUR_RGB_TITLE="colour with";Blockly.Msg.COLOUR_RGB_TOOLTIP="Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL="https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK="break out of loop";Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE="continue with next iteration of loop";Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK="Break out of the containing loop.";Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE="Skip the rest of this loop, and continue with the next iteration.";Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING="Warning: This block may only be used within a loop.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL="https://github.com/google/blockly/wiki/Loops#for-each";Blockly.Msg.CONTROLS_FOREACH_TITLE="for each item %1 in list %2";Blockly.Msg.CONTROLS_FOREACH_TOOLTIP="For each item in a list, set the variable '%1' to the item, and then do some statements.";Blockly.Msg.CONTROLS_FOR_HELPURL="https://github.com/google/blockly/wiki/Loops#count-with";Blockly.Msg.CONTROLS_FOR_TITLE="count with %1 from %2 to %3 by %4";Blockly.Msg.CONTROLS_FOR_TOOLTIP="Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP="Add a condition to the if block.";Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP="Add a final, catch-all condition to the if block.";Blockly.Msg.CONTROLS_IF_HELPURL="https://github.com/google/blockly/wiki/IfElse";Blockly.Msg.CONTROLS_IF_IF_TOOLTIP="Add, remove, or reorder sections to reconfigure this if block.";Blockly.Msg.CONTROLS_IF_MSG_ELSE="else";Blockly.Msg.CONTROLS_IF_MSG_ELSEIF="else if";Blockly.Msg.CONTROLS_IF_MSG_IF="if";Blockly.Msg.CONTROLS_IF_TOOLTIP_1="If a value is true, then do some statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2="If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";Blockly.Msg.CONTROLS_IF_TOOLTIP_3="If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";Blockly.Msg.CONTROLS_IF_TOOLTIP_4="If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL="https://en.wikipedia.org/wiki/For_loop";Blockly.Msg.CONTROLS_REPEAT_INPUT_DO="do";Blockly.Msg.CONTROLS_REPEAT_TITLE="repeat %1 times";Blockly.Msg.CONTROLS_REPEAT_TOOLTIP="Do some statements several times.";Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL="https://github.com/google/blockly/wiki/Loops#repeat";Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL="repeat until";Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE="repeat while";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL="While a value is false, then do some statements.";Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE="While a value is true, then do some statements.";Blockly.Msg.DELETE_ALL_BLOCKS="Delete all %1 blocks?";Blockly.Msg.DELETE_BLOCK="Delete Block";Blockly.Msg.DELETE_VARIABLE="Delete the '%1' variable";Blockly.Msg.DELETE_VARIABLE_CONFIRMATION="Delete %1 uses of the '%2' variable?";Blockly.Msg.DELETE_X_BLOCKS="Delete %1 Blocks";Blockly.Msg.DISABLE_BLOCK="Disable Block";
Blockly.Msg.DUPLICATE_BLOCK="Duplicate";Blockly.Msg.ENABLE_BLOCK="Enable Block";Blockly.Msg.EXPAND_ALL="Expand Blocks";Blockly.Msg.EXPAND_BLOCK="Expand Block";Blockly.Msg.EXTERNAL_INPUTS="External Inputs";Blockly.Msg.HELP="Help";Blockly.Msg.INLINE_INPUTS="Inline Inputs";Blockly.Msg.IOS_CANCEL="Cancel";Blockly.Msg.IOS_ERROR="Error";Blockly.Msg.IOS_OK="OK";Blockly.Msg.IOS_PROCEDURES_ADD_INPUT="+ Add Input";Blockly.Msg.IOS_PROCEDURES_ALLOW_STATEMENTS="Allow statements";
Blockly.Msg.IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR="This function has duplicate inputs.";Blockly.Msg.IOS_PROCEDURES_INPUTS="INPUTS";Blockly.Msg.IOS_VARIABLES_ADD_BUTTON="Add";Blockly.Msg.IOS_VARIABLES_ADD_VARIABLE="+ Add Variable";Blockly.Msg.IOS_VARIABLES_DELETE_BUTTON="Delete";Blockly.Msg.IOS_VARIABLES_EMPTY_NAME_ERROR="You can't use an empty variable name.";Blockly.Msg.IOS_VARIABLES_RENAME_BUTTON="Rename";Blockly.Msg.IOS_VARIABLES_VARIABLE_NAME="Variable name";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL="https://github.com/google/blockly/wiki/Lists#create-empty-list";Blockly.Msg.LISTS_CREATE_EMPTY_TITLE="create empty list";Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP="Returns a list, of length 0, containing no data records";Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD="list";Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP="Add, remove, or reorder sections to reconfigure this list block.";Blockly.Msg.LISTS_CREATE_WITH_HELPURL="https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH="create list with";Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP="Add an item to the list.";Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP="Create a list with any number of items.";Blockly.Msg.LISTS_GET_INDEX_FIRST="first";Blockly.Msg.LISTS_GET_INDEX_FROM_END="# from end";Blockly.Msg.LISTS_GET_INDEX_FROM_START="#";Blockly.Msg.LISTS_GET_INDEX_GET="get";Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE="get and remove";Blockly.Msg.LISTS_GET_INDEX_LAST="last";
Blockly.Msg.LISTS_GET_INDEX_RANDOM="random";Blockly.Msg.LISTS_GET_INDEX_REMOVE="remove";Blockly.Msg.LISTS_GET_INDEX_TAIL="";Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST="Returns the first item in a list.";Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM="Returns the item at the specified position in a list.";Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST="Returns the last item in a list.";Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM="Returns a random item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST="Removes and returns the first item in a list.";Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM="Removes and returns the item at the specified position in a list.";Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST="Removes and returns the last item in a list.";Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM="Removes and returns a random item in a list.";Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST="Removes the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM="Removes the item at the specified position in a list.";Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST="Removes the last item in a list.";Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM="Removes a random item in a list.";Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END="to # from end";Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START="to #";Blockly.Msg.LISTS_GET_SUBLIST_END_LAST="to last";Blockly.Msg.LISTS_GET_SUBLIST_HELPURL="https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST="get sub-list from first";Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END="get sub-list from # from end";Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START="get sub-list from #";Blockly.Msg.LISTS_GET_SUBLIST_TAIL="";Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP="Creates a copy of the specified portion of a list.";Blockly.Msg.LISTS_INDEX_FROM_END_TOOLTIP="%1 is the last item.";Blockly.Msg.LISTS_INDEX_FROM_START_TOOLTIP="%1 is the first item.";
Blockly.Msg.LISTS_INDEX_OF_FIRST="find first occurrence of item";Blockly.Msg.LISTS_INDEX_OF_HELPURL="https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";Blockly.Msg.LISTS_INDEX_OF_LAST="find last occurrence of item";Blockly.Msg.LISTS_INDEX_OF_TOOLTIP="Returns the index of the first/last occurrence of the item in the list. Returns %1 if item is not found.";Blockly.Msg.LISTS_INLIST="in list";Blockly.Msg.LISTS_ISEMPTY_HELPURL="https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg.LISTS_ISEMPTY_TITLE="%1 is empty";Blockly.Msg.LISTS_ISEMPTY_TOOLTIP="Returns true if the list is empty.";Blockly.Msg.LISTS_LENGTH_HELPURL="https://github.com/google/blockly/wiki/Lists#length-of";Blockly.Msg.LISTS_LENGTH_TITLE="length of %1";Blockly.Msg.LISTS_LENGTH_TOOLTIP="Returns the length of a list.";Blockly.Msg.LISTS_REPEAT_HELPURL="https://github.com/google/blockly/wiki/Lists#create-list-with";Blockly.Msg.LISTS_REPEAT_TITLE="create list with item %1 repeated %2 times";
Blockly.Msg.LISTS_REPEAT_TOOLTIP="Creates a list consisting of the given value repeated the specified number of times.";Blockly.Msg.LISTS_REVERSE_HELPURL="https://github.com/google/blockly/wiki/Lists#reversing-a-list";Blockly.Msg.LISTS_REVERSE_MESSAGE0="reverse %1";Blockly.Msg.LISTS_REVERSE_TOOLTIP="Reverse a copy of a list.";Blockly.Msg.LISTS_SET_INDEX_HELPURL="https://github.com/google/blockly/wiki/Lists#in-list--set";Blockly.Msg.LISTS_SET_INDEX_INPUT_TO="as";
Blockly.Msg.LISTS_SET_INDEX_INSERT="insert at";Blockly.Msg.LISTS_SET_INDEX_SET="set";Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST="Inserts the item at the start of a list.";Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM="Inserts the item at the specified position in a list.";Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST="Append the item to the end of a list.";Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM="Inserts the item randomly in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST="Sets the first item in a list.";Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM="Sets the item at the specified position in a list.";Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST="Sets the last item in a list.";Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM="Sets a random item in a list.";Blockly.Msg.LISTS_SORT_HELPURL="https://github.com/google/blockly/wiki/Lists#sorting-a-list";Blockly.Msg.LISTS_SORT_ORDER_ASCENDING="ascending";
Blockly.Msg.LISTS_SORT_ORDER_DESCENDING="descending";Blockly.Msg.LISTS_SORT_TITLE="sort %1 %2 %3";Blockly.Msg.LISTS_SORT_TOOLTIP="Sort a copy of a list.";Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE="alphabetic, ignore case";Blockly.Msg.LISTS_SORT_TYPE_NUMERIC="numeric";Blockly.Msg.LISTS_SORT_TYPE_TEXT="alphabetic";Blockly.Msg.LISTS_SPLIT_HELPURL="https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT="make list from text";
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST="make text from list";Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN="Join a list of texts into one text, separated by a delimiter.";Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT="Split text into a list of texts, breaking at each delimiter.";Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER="with delimiter";Blockly.Msg.LOGIC_BOOLEAN_FALSE="false";Blockly.Msg.LOGIC_BOOLEAN_HELPURL="https://github.com/google/blockly/wiki/Logic#values";Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP="Returns either true or false.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE="true";Blockly.Msg.LOGIC_COMPARE_HELPURL="https://en.wikipedia.org/wiki/Inequality_(mathematics)";Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ="Return true if both inputs equal each other.";Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT="Return true if the first input is greater than the second input.";Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE="Return true if the first input is greater than or equal to the second input.";Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT="Return true if the first input is smaller than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE="Return true if the first input is smaller than or equal to the second input.";Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ="Return true if both inputs are not equal to each other.";Blockly.Msg.LOGIC_NEGATE_HELPURL="https://github.com/google/blockly/wiki/Logic#not";Blockly.Msg.LOGIC_NEGATE_TITLE="not %1";Blockly.Msg.LOGIC_NEGATE_TOOLTIP="Returns true if the input is false. Returns false if the input is true.";Blockly.Msg.LOGIC_NULL="null";
Blockly.Msg.LOGIC_NULL_HELPURL="https://en.wikipedia.org/wiki/Nullable_type";Blockly.Msg.LOGIC_NULL_TOOLTIP="Returns null.";Blockly.Msg.LOGIC_OPERATION_AND="and";Blockly.Msg.LOGIC_OPERATION_HELPURL="https://github.com/google/blockly/wiki/Logic#logical-operations";Blockly.Msg.LOGIC_OPERATION_OR="or";Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND="Return true if both inputs are true.";Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR="Return true if at least one of the inputs is true.";
Blockly.Msg.LOGIC_TERNARY_CONDITION="test";Blockly.Msg.LOGIC_TERNARY_HELPURL="https://en.wikipedia.org/wiki/%3F:";Blockly.Msg.LOGIC_TERNARY_IF_FALSE="if false";Blockly.Msg.LOGIC_TERNARY_IF_TRUE="if true";Blockly.Msg.LOGIC_TERNARY_TOOLTIP="Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";Blockly.Msg.MATH_ADDITION_SYMBOL="+";Blockly.Msg.MATH_ARITHMETIC_HELPURL="https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD="Return the sum of the two numbers.";Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE="Return the quotient of the two numbers.";Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS="Return the difference of the two numbers.";Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY="Return the product of the two numbers.";Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER="Return the first number raised to the power of the second number.";Blockly.Msg.MATH_CHANGE_HELPURL="https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_TITLE="change %1 by %2";Blockly.Msg.MATH_CHANGE_TOOLTIP="Add a number to variable '%1'.";Blockly.Msg.MATH_CONSTANT_HELPURL="https://en.wikipedia.org/wiki/Mathematical_constant";Blockly.Msg.MATH_CONSTANT_TOOLTIP="Return one of the common constants: \u03c0 (3.141\u2026), e (2.718\u2026), \u03c6 (1.618\u2026), sqrt(2) (1.414\u2026), sqrt(\u00bd) (0.707\u2026), or \u221e (infinity).";Blockly.Msg.MATH_CONSTRAIN_HELPURL="https://en.wikipedia.org/wiki/Clamping_(graphics)";
Blockly.Msg.MATH_CONSTRAIN_TITLE="constrain %1 low %2 high %3";Blockly.Msg.MATH_CONSTRAIN_TOOLTIP="Constrain a number to be between the specified limits (inclusive).";Blockly.Msg.MATH_DIVISION_SYMBOL="\u00f7";Blockly.Msg.MATH_IS_DIVISIBLE_BY="is divisible by";Blockly.Msg.MATH_IS_EVEN="is even";Blockly.Msg.MATH_IS_NEGATIVE="is negative";Blockly.Msg.MATH_IS_ODD="is odd";Blockly.Msg.MATH_IS_POSITIVE="is positive";Blockly.Msg.MATH_IS_PRIME="is prime";Blockly.Msg.MATH_IS_TOOLTIP="Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";
Blockly.Msg.MATH_IS_WHOLE="is whole";Blockly.Msg.MATH_MODULO_HELPURL="https://en.wikipedia.org/wiki/Modulo_operation";Blockly.Msg.MATH_MODULO_TITLE="remainder of %1 \u00f7 %2";Blockly.Msg.MATH_MODULO_TOOLTIP="Return the remainder from dividing the two numbers.";Blockly.Msg.MATH_MULTIPLICATION_SYMBOL="\u00d7";Blockly.Msg.MATH_NUMBER_HELPURL="https://en.wikipedia.org/wiki/Number";Blockly.Msg.MATH_NUMBER_TOOLTIP="A number.";Blockly.Msg.MATH_ONLIST_HELPURL="";
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE="average of list";Blockly.Msg.MATH_ONLIST_OPERATOR_MAX="max of list";Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN="median of list";Blockly.Msg.MATH_ONLIST_OPERATOR_MIN="min of list";Blockly.Msg.MATH_ONLIST_OPERATOR_MODE="modes of list";Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM="random item of list";Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV="standard deviation of list";Blockly.Msg.MATH_ONLIST_OPERATOR_SUM="sum of list";Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE="Return the average (arithmetic mean) of the numeric values in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX="Return the largest number in the list.";Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN="Return the median number in the list.";Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN="Return the smallest number in the list.";Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE="Return a list of the most common item(s) in the list.";Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM="Return a random element from the list.";Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV="Return the standard deviation of the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM="Return the sum of all the numbers in the list.";Blockly.Msg.MATH_POWER_SYMBOL="^";Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL="https://en.wikipedia.org/wiki/Random_number_generation";Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM="random fraction";Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP="Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";Blockly.Msg.MATH_RANDOM_INT_HELPURL="https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_INT_TITLE="random integer from %1 to %2";Blockly.Msg.MATH_RANDOM_INT_TOOLTIP="Return a random integer between the two specified limits, inclusive.";Blockly.Msg.MATH_ROUND_HELPURL="https://en.wikipedia.org/wiki/Rounding";Blockly.Msg.MATH_ROUND_OPERATOR_ROUND="round";Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN="round down";Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP="round up";Blockly.Msg.MATH_ROUND_TOOLTIP="Round a number up or down.";Blockly.Msg.MATH_SINGLE_HELPURL="https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE="absolute";Blockly.Msg.MATH_SINGLE_OP_ROOT="square root";Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS="Return the absolute value of a number.";Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP="Return e to the power of a number.";Blockly.Msg.MATH_SINGLE_TOOLTIP_LN="Return the natural logarithm of a number.";Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10="Return the base 10 logarithm of a number.";Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG="Return the negation of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10="Return 10 to the power of a number.";Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT="Return the square root of a number.";Blockly.Msg.MATH_SUBTRACTION_SYMBOL="-";Blockly.Msg.MATH_TRIG_ACOS="acos";Blockly.Msg.MATH_TRIG_ASIN="asin";Blockly.Msg.MATH_TRIG_ATAN="atan";Blockly.Msg.MATH_TRIG_COS="cos";Blockly.Msg.MATH_TRIG_HELPURL="https://en.wikipedia.org/wiki/Trigonometric_functions";Blockly.Msg.MATH_TRIG_SIN="sin";Blockly.Msg.MATH_TRIG_TAN="tan";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS="Return the arccosine of a number.";Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN="Return the arcsine of a number.";Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN="Return the arctangent of a number.";Blockly.Msg.MATH_TRIG_TOOLTIP_COS="Return the cosine of a degree (not radian).";Blockly.Msg.MATH_TRIG_TOOLTIP_SIN="Return the sine of a degree (not radian).";Blockly.Msg.MATH_TRIG_TOOLTIP_TAN="Return the tangent of a degree (not radian).";Blockly.Msg.MBED_ANALOGREAD="read analog pin#";
Blockly.Msg.MBED_ANALOGREAD_TIP="Return value between 0 and 1024";Blockly.Msg.MBED_ANALOGWRITE="set analog pin#";Blockly.Msg.MBED_ANALOGWRITE_TIP="Write analog value between 0 and 255 to a specific PWM Port";Blockly.Msg.MBED_BUILTIN_LED="set built-in LED";Blockly.Msg.MBED_BUILTIN_LED_TIP="Light on or off for the built-in LED of the Arduino";Blockly.Msg.MBED_COMPONENT_WARN1="A %1 configuration block with the same %2 name must be added to use this block!";Blockly.Msg.MBED_DEFINE="Define";
Blockly.Msg.MBED_DIGITALREAD="read digital pin#";Blockly.Msg.MBED_DIGITALREAD_TIP="Read digital value on a pin: HIGH or LOW";Blockly.Msg.MBED_DIGITALWRITE="set digitial pin#";Blockly.Msg.MBED_DIGITALWRITE_TIP="Write digital value HIGH or LOW to a specific Port";Blockly.Msg.MBED_FUN_RUN_LOOP="Arduino loop forever:";Blockly.Msg.MBED_FUN_RUN_SETUP="Arduino run first:";Blockly.Msg.MBED_FUN_RUN_TIP="Defines the Arduino setup() and loop() functions.";Blockly.Msg.MBED_HIGH="HIGH";
Blockly.Msg.MBED_HIGHLOW_TIP="Set a pin state logic High or Low.";Blockly.Msg.MBED_LOW="LOW";Blockly.Msg.MBED_MACRO_DEFAULT_NAME="newMacro";Blockly.Msg.MBED_MACRO_DEFINE="define %1 as %2";Blockly.Msg.MBED_MACRO_DEFINE_CREATE_SET="Create 'define %1'";Blockly.Msg.MBED_MACRO_DEFINE_HELPURL="";Blockly.Msg.MBED_MACRO_DEFINE_TOOLTIP="Defines this macro to be equal to the input.";Blockly.Msg.MBED_MACRO_GET_HELPURL="";Blockly.Msg.MBED_MACRO_GET_TOOLTIP="get the value of this macro";Blockly.Msg.MBED_MAP="Map";
Blockly.Msg.MBED_MAP_TIP="Re-maps a number from [0-1024] to another.";Blockly.Msg.MBED_MAP_VAL="value to [0-";Blockly.Msg.MBED_NEW_MACRO="New macro...";Blockly.Msg.MBED_NEW_MACRO_TITLE="New macro name:";Blockly.Msg.MBED_NOTONE="Turn off tone on pin #";Blockly.Msg.MBED_NOTONE_PIN="No tone PIN#";Blockly.Msg.MBED_NOTONE_PIN_TIP="Stop generating a tone on a pin";Blockly.Msg.MBED_NOTONE_TIP="Turns the tone off on the selected pin";Blockly.Msg.MBED_PIN_WARN1="Pin %1 is needed for %2 as pin %3. Already used as %4.";
Blockly.Msg.MBED_PULSEON="pulse on pin #";Blockly.Msg.MBED_PULSEREAD="Read";Blockly.Msg.MBED_PULSETIMEOUT="timeout after";Blockly.Msg.MBED_PULSETIMEOUT_MS="";Blockly.Msg.MBED_PULSETIMEOUT_TIP="Measures the duration of a pulse on the selected pin, if it is within the timeout.";Blockly.Msg.MBED_PULSE_TIP="Measures the duration of a pulse on the selected pin.";Blockly.Msg.MBED_RENAME_MACRO="Rename macro...";Blockly.Msg.MBED_RENAME_MACRO_TITLE="Rename all '%1' macros to:";
Blockly.Msg.MBED_SERIAL_BPS="bps";Blockly.Msg.MBED_SERIAL_PRINT="print";Blockly.Msg.MBED_SERIAL_PRINT_NEWLINE="add new line";Blockly.Msg.MBED_SERIAL_PRINT_TIP="Prints data to the console/serial port as human-readable ASCII text.";Blockly.Msg.MBED_SERIAL_PRINT_WARN="A setup block for %1 must be added to the workspace to use this block!";Blockly.Msg.MBED_SERIAL_SETUP="Setup";Blockly.Msg.MBED_SERIAL_SETUP_TIP="Selects the speed for a specific Serial peripheral";Blockly.Msg.MBED_SERIAL_SPEED=":  speed to";
Blockly.Msg.MBED_SERVO_READ="read SERVO from PIN#";Blockly.Msg.MBED_SERVO_READ_TIP="Read a Servo angle";Blockly.Msg.MBED_SERVO_WRITE="set SERVO from Pin";Blockly.Msg.MBED_SERVO_WRITE_DEG_180="Degrees (0~180)";Blockly.Msg.MBED_SERVO_WRITE_TIP="Set a Servo to an specified angle";Blockly.Msg.MBED_SERVO_WRITE_TO="to";Blockly.Msg.MBED_SETTONE="Set tone on pin #";Blockly.Msg.MBED_SPI_SETUP="Setup";Blockly.Msg.MBED_SPI_SETUP_CONF="configuration:";Blockly.Msg.MBED_SPI_SETUP_DIVIDE="clock divide";
Blockly.Msg.MBED_SPI_SETUP_LSBFIRST="LSBFIRST";Blockly.Msg.MBED_SPI_SETUP_MODE="SPI mode (idle - edge)";Blockly.Msg.MBED_SPI_SETUP_MODE0="0 (Low - Falling)";Blockly.Msg.MBED_SPI_SETUP_MODE1="1 (Low - Rising)";Blockly.Msg.MBED_SPI_SETUP_MODE2="2 (High - Falling)";Blockly.Msg.MBED_SPI_SETUP_MODE3="3 (High - Rising)";Blockly.Msg.MBED_SPI_SETUP_MSBFIRST="MSBFIRST";Blockly.Msg.MBED_SPI_SETUP_SHIFT="data shift";Blockly.Msg.MBED_SPI_SETUP_TIP="Configures the SPI peripheral.";
Blockly.Msg.MBED_SPI_TRANSRETURN_TIP="Send a SPI message to an specified slave device and get data back.";Blockly.Msg.MBED_SPI_TRANS_NONE="none";Blockly.Msg.MBED_SPI_TRANS_SLAVE="to slave pin";Blockly.Msg.MBED_SPI_TRANS_TIP="Send a SPI message to an specified slave device.";Blockly.Msg.MBED_SPI_TRANS_VAL="transfer";Blockly.Msg.MBED_SPI_TRANS_WARN1="A setup block for %1 must be added to the workspace to use this block!";Blockly.Msg.MBED_SPI_TRANS_WARN2="Old pin value %1 is no longer available.";
Blockly.Msg.MBED_STEPPER_COMPONENT="stepper";Blockly.Msg.MBED_STEPPER_DEFAULT_NAME="MyStepper";Blockly.Msg.MBED_STEPPER_MOTOR="stepper motor:";Blockly.Msg.MBED_STEPPER_PIN1="pin1#";Blockly.Msg.MBED_STEPPER_PIN2="pin2#";Blockly.Msg.MBED_STEPPER_REVOLVS="how many steps per revolution";Blockly.Msg.MBED_STEPPER_SETUP="Setup stepper motor";Blockly.Msg.MBED_STEPPER_SETUP_TIP="Configures a stepper motor pinout and other settings.";Blockly.Msg.MBED_STEPPER_SPEED="set speed (rpm) to";
Blockly.Msg.MBED_STEPPER_STEP="move stepper";Blockly.Msg.MBED_STEPPER_STEPS="steps";Blockly.Msg.MBED_STEPPER_STEP_TIP="Turns the stepper motor a specific number of steps.";Blockly.Msg.MBED_TIME_DELAY="wait";Blockly.Msg.MBED_TIME_DELAY_MICROS="microseconds";Blockly.Msg.MBED_TIME_DELAY_MICRO_TIP="Wait specific time in microseconds";Blockly.Msg.MBED_TIME_DELAY_TIP="Wait specific time in milliseconds";Blockly.Msg.MBED_TIME_INF="wait forever (end program)";Blockly.Msg.MBED_TIME_INF_TIP="Wait indefinitely, stopping the program.";
Blockly.Msg.MBED_TIME_MICROS="current elapsed Time (microseconds)";Blockly.Msg.MBED_TIME_MICROS_TIP="Returns the number of microseconds since the Arduino board began running the current program. Has to be stored in a positive long integer";Blockly.Msg.MBED_TIME_MILLIS="current elapsed Time (milliseconds)";Blockly.Msg.MBED_TIME_MILLIS_TIP="Returns the number of milliseconds since the Arduino board began running the current program. Has to be stored in a positive long integer";
Blockly.Msg.MBED_TIME_MS="milliseconds";Blockly.Msg.MBED_TONEFREQ="at frequency";Blockly.Msg.MBED_TONE_FREQ="frequency";Blockly.Msg.MBED_TONE_PIN="Tone PIN#";Blockly.Msg.MBED_TONE_PIN_TIP="Generate audio tones on a pin";Blockly.Msg.MBED_TONE_TIP="Sets tone on pin to specified frequency within range 31 - 65535";Blockly.Msg.MBED_TONE_WARNING="Frequency must be in range 31 - 65535";Blockly.Msg.MBED_TYPE_ARRAY="Array";Blockly.Msg.MBED_TYPE_BOOL="Boolean";Blockly.Msg.MBED_TYPE_CHAR="Character";
Blockly.Msg.MBED_TYPE_CHILDBLOCKMISSING="ChildBlockMissing";Blockly.Msg.MBED_TYPE_DECIMAL="Decimal";Blockly.Msg.MBED_TYPE_LONG="Large Number";Blockly.Msg.MBED_TYPE_NULL="Null";Blockly.Msg.MBED_TYPE_NUMBER="Number";Blockly.Msg.MBED_TYPE_SHORT="Short Number";Blockly.Msg.MBED_TYPE_TEXT="Text";Blockly.Msg.MBED_TYPE_UNDEF="Undefined";Blockly.Msg.MBED_VALUE="value";Blockly.Msg.MBED_VAR_AS="as";Blockly.Msg.MBED_VAR_AS_TIP="Sets a value to a specific type";Blockly.Msg.MBED_WRITE_TO="to";
Blockly.Msg.NEW_COLOUR_VARIABLE="Create colour variable...";Blockly.Msg.NEW_NUMBER_VARIABLE="Create number variable...";Blockly.Msg.NEW_STRING_VARIABLE="Create string variable...";Blockly.Msg.NEW_VARIABLE="Create variable...";Blockly.Msg.NEW_VARIABLE_TITLE="New variable name:";Blockly.Msg.NEW_VARIABLE_TYPE_TITLE="New variable type:";Blockly.Msg.ORDINAL_NUMBER_SUFFIX="";Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS="allow statements";Blockly.Msg.PROCEDURES_BEFORE_PARAMS="with:";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL="https://en.wikipedia.org/wiki/Subroutine";Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP="Run the user-defined function '%1'.";Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL="https://en.wikipedia.org/wiki/Subroutine";Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP="Run the user-defined function '%1' and use its output.";Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS="with:";Blockly.Msg.PROCEDURES_CREATE_DO="Create '%1'";Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT="Describe this function...";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO="";Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL="https://en.wikipedia.org/wiki/Subroutine";Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE="do something";Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE="to";Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP="Creates a function with no output.";Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL="https://en.wikipedia.org/wiki/Subroutine";Blockly.Msg.PROCEDURES_DEFRETURN_RETURN="return";Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP="Creates a function with an output.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING="Warning: This function has duplicate parameters.";Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF="Highlight function definition";Blockly.Msg.PROCEDURES_IFRETURN_HELPURL="http://c2.com/cgi/wiki?GuardClause";Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP="If a value is true, then return a second value.";Blockly.Msg.PROCEDURES_IFRETURN_WARNING="Warning: This block may be used only within a function definition.";Blockly.Msg.PROCEDURES_MUTATORARG_TITLE="input name:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP="Add an input to the function.";Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE="inputs";Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP="Add, remove, or reorder inputs to this function.";Blockly.Msg.REDO="Redo";Blockly.Msg.REMOVE_COMMENT="Remove Comment";Blockly.Msg.RENAME_VARIABLE="Rename variable...";Blockly.Msg.RENAME_VARIABLE_TITLE="Rename all '%1' variables to:";Blockly.Msg.TEXT_APPEND_HELPURL="https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_APPEND_TITLE="to %1 append text %2";Blockly.Msg.TEXT_APPEND_TOOLTIP="Append some text to variable '%1'.";Blockly.Msg.TEXT_CHANGECASE_HELPURL="https://github.com/google/blockly/wiki/Text#adjusting-text-case";Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE="to lower case";Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE="to Title Case";Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE="to UPPER CASE";Blockly.Msg.TEXT_CHANGECASE_TOOLTIP="Return a copy of the text in a different case.";
Blockly.Msg.TEXT_CHARAT_FIRST="get first letter";Blockly.Msg.TEXT_CHARAT_FROM_END="get letter # from end";Blockly.Msg.TEXT_CHARAT_FROM_START="get letter #";Blockly.Msg.TEXT_CHARAT_HELPURL="https://github.com/google/blockly/wiki/Text#extracting-text";Blockly.Msg.TEXT_CHARAT_LAST="get last letter";Blockly.Msg.TEXT_CHARAT_RANDOM="get random letter";Blockly.Msg.TEXT_CHARAT_TAIL="";Blockly.Msg.TEXT_CHARAT_TITLE="in text %1 %2";Blockly.Msg.TEXT_CHARAT_TOOLTIP="Returns the letter at the specified position.";
Blockly.Msg.TEXT_COUNT_HELPURL="https://github.com/google/blockly/wiki/Text#counting-substrings";Blockly.Msg.TEXT_COUNT_MESSAGE0="count %1 in %2";Blockly.Msg.TEXT_COUNT_TOOLTIP="Count how many times some text occurs within some other text.";Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP="Add an item to the text.";Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN="join";Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP="Add, remove, or reorder sections to reconfigure this text block.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END="to letter # from end";Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START="to letter #";Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST="to last letter";Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL="https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT="in text";Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST="get substring from first letter";Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END="get substring from letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START="get substring from letter #";Blockly.Msg.TEXT_GET_SUBSTRING_TAIL="";Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP="Returns a specified portion of the text.";Blockly.Msg.TEXT_INDEXOF_HELPURL="https://github.com/google/blockly/wiki/Text#finding-text";Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST="find first occurrence of text";Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST="find last occurrence of text";Blockly.Msg.TEXT_INDEXOF_TITLE="in text %1 %2 %3";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP="Returns the index of the first/last occurrence of the first text in the second text. Returns %1 if text is not found.";Blockly.Msg.TEXT_ISEMPTY_HELPURL="https://github.com/google/blockly/wiki/Text#checking-for-empty-text";Blockly.Msg.TEXT_ISEMPTY_TITLE="%1 is empty";Blockly.Msg.TEXT_ISEMPTY_TOOLTIP="Returns true if the provided text is empty.";Blockly.Msg.TEXT_JOIN_HELPURL="https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH="create text with";Blockly.Msg.TEXT_JOIN_TOOLTIP="Create a piece of text by joining together any number of items.";Blockly.Msg.TEXT_LENGTH_HELPURL="https://github.com/google/blockly/wiki/Text#text-modification";Blockly.Msg.TEXT_LENGTH_TITLE="length of %1";Blockly.Msg.TEXT_LENGTH_TOOLTIP="Returns the number of letters (including spaces) in the provided text.";Blockly.Msg.TEXT_PRINT_HELPURL="https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg.TEXT_PRINT_TITLE="print %1";Blockly.Msg.TEXT_PRINT_TOOLTIP="Print the specified text, number or other value.";Blockly.Msg.TEXT_PROMPT_HELPURL="https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER="Prompt for user for a number.";Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT="Prompt for user for some text.";Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER="prompt for number with message";Blockly.Msg.TEXT_PROMPT_TYPE_TEXT="prompt for text with message";
Blockly.Msg.TEXT_REPLACE_HELPURL="https://github.com/google/blockly/wiki/Text#replacing-substrings";Blockly.Msg.TEXT_REPLACE_MESSAGE0="replace %1 with %2 in %3";Blockly.Msg.TEXT_REPLACE_TOOLTIP="Replace all occurances of some text within some other text.";Blockly.Msg.TEXT_REVERSE_HELPURL="https://github.com/google/blockly/wiki/Text#reversing-text";Blockly.Msg.TEXT_REVERSE_MESSAGE0="reverse %1";Blockly.Msg.TEXT_REVERSE_TOOLTIP="Reverses the order of the characters in the text.";
Blockly.Msg.TEXT_TEXT_HELPURL="https://en.wikipedia.org/wiki/String_(computer_science)";Blockly.Msg.TEXT_TEXT_TOOLTIP="A letter, word, or line of text.";Blockly.Msg.TEXT_TRIM_HELPURL="https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH="trim spaces from both sides of";Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT="trim spaces from left side of";Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT="trim spaces from right side of";Blockly.Msg.TEXT_TRIM_TOOLTIP="Return a copy of the text with spaces removed from one or both ends.";
Blockly.Msg.TODAY="Today";Blockly.Msg.UNDO="Undo";Blockly.Msg.VARIABLES_DEFAULT_NAME="item";Blockly.Msg.VARIABLES_GET_CREATE_SET="Create 'set %1'";Blockly.Msg.VARIABLES_GET_HELPURL="https://github.com/google/blockly/wiki/Variables#get";Blockly.Msg.VARIABLES_GET_TOOLTIP="Returns the value of this variable.";Blockly.Msg.VARIABLES_SET="set %1 to %2";Blockly.Msg.VARIABLES_SET_CREATE_GET="Create 'get %1'";Blockly.Msg.VARIABLES_SET_HELPURL="https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg.VARIABLES_SET_TOOLTIP="Sets this variable to be equal to the input.";Blockly.Msg.VARIABLE_ALREADY_EXISTS="A variable named '%1' already exists.";Blockly.Msg.VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE="A variable named '%1' already exists for another type: '%2'.";Blockly.Msg.PROCEDURES_DEFRETURN_TITLE=Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;Blockly.Msg.CONTROLS_IF_IF_TITLE_IF=Blockly.Msg.CONTROLS_IF_MSG_IF;Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO=Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_MSG_THEN=Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE=Blockly.Msg.CONTROLS_IF_MSG_ELSE;Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE=Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST=Blockly.Msg.LISTS_INLIST;Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST=Blockly.Msg.LISTS_INLIST;Blockly.Msg.MATH_CHANGE_TITLE_ITEM=Blockly.Msg.VARIABLES_DEFAULT_NAME;Blockly.Msg.PROCEDURES_DEFRETURN_DO=Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF=Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;Blockly.Msg.LISTS_GET_INDEX_HELPURL=Blockly.Msg.LISTS_INDEX_OF_HELPURL;Blockly.Msg.CONTROLS_FOREACH_INPUT_DO=Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST=Blockly.Msg.LISTS_INLIST;Blockly.Msg.CONTROLS_FOR_INPUT_DO=Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE=Blockly.Msg.VARIABLES_DEFAULT_NAME;Blockly.Msg.TEXT_APPEND_VARIABLE=Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM=Blockly.Msg.VARIABLES_DEFAULT_NAME;Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST=Blockly.Msg.LISTS_INLIST;Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT=Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;Blockly.Msg.MATH_HUE="230";Blockly.Msg.LOOPS_HUE="120";Blockly.Msg.LISTS_HUE="260";Blockly.Msg.LOGIC_HUE="210";Blockly.Msg.VARIABLES_HUE="330";Blockly.Msg.TEXTS_HUE="160";Blockly.Msg.PROCEDURES_HUE="290";Blockly.Msg.COLOUR_HUE="20";Blockly.Msg.VARIABLES_DYNAMIC_HUE="310";var __assign=this&&this.__assign||Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p]}return t};var defaults={lines:12,length:7,width:5,radius:10,scale:1,corners:1,color:"#000",fadeColor:"transparent",opacity:.25,rotate:0,direction:1,speed:1,trail:100,fps:20,zIndex:2E9,className:"spinner",top:"50%",left:"50%",shadow:"none",position:"absolute"};
var Spinner=function(){function Spinner(opts){if(opts===void 0)opts={};this.opts=__assign({},defaults,opts)}Spinner.prototype.spin=function(target){var _this=this;this.stop();this.el=document.createElement("div");this.el.className=this.opts.className;this.el.setAttribute("role","progressbar");css(this.el,{position:this.opts.position,width:0,zIndex:this.opts.zIndex,left:this.opts.left,top:this.opts.top,transform:"scale("+this.opts.scale+")"});if(target)target.insertBefore(this.el,target.firstChild||
null);var animator;var getNow;if(typeof requestAnimationFrame!=="undefined"){animator=requestAnimationFrame;getNow=function(){return performance.now()}}else{animator=function(callback){return setTimeout(callback,1E3/_this.opts.fps)};getNow=function(){return Date.now()}}var lastFrameTime;var state=0;var animate=function(){var time=getNow();if(lastFrameTime===undefined)lastFrameTime=time-1;state+=getAdvancePercentage(time-lastFrameTime,_this.opts.speed);lastFrameTime=time;if(state>1)state-=Math.floor(state);
if(_this.el.childNodes.length===_this.opts.lines)for(var line=0;line<_this.opts.lines;line++){var opacity=getLineOpacity(line,state,_this.opts);_this.el.childNodes[line].childNodes[0].style.opacity=opacity.toString()}_this.animateId=_this.el?animator(animate):undefined};drawLines(this.el,this.opts);animate();return this};Spinner.prototype.stop=function(){if(this.el){if(typeof requestAnimationFrame!=="undefined")cancelAnimationFrame(this.animateId);else clearTimeout(this.animateId);if(this.el.parentNode)this.el.parentNode.removeChild(this.el);
this.el=undefined}return this};return Spinner}();function getAdvancePercentage(msSinceLastFrame,roundsPerSecond){return msSinceLastFrame/1E3*roundsPerSecond}
function getLineOpacity(line,state,opts){var linePercent=(line+1)/opts.lines;var diff=state-linePercent*opts.direction;if(diff<0||diff>1)diff+=opts.direction;var trailPercent=opts.trail/100;var opacityPercent=1-diff/trailPercent;if(opacityPercent<0)return opts.opacity;var opacityDiff=1-opts.opacity;return opacityPercent*opacityDiff+opts.opacity}
function vendor(el,prop){if(el.style[prop]!==undefined)return prop;var prefixed="ms"+prop.charAt(0).toUpperCase()+prop.slice(1);if(el.style[prefixed]!==undefined)return prefixed;return""}function css(el,props){for(var prop in props)el.style[vendor(el,prop)||prop]=props[prop];return el}function getColor(color,idx){return typeof color=="string"?color:color[idx%color.length]}
function drawLines(el,opts){var borderRadius=Math.round(opts.corners*opts.width*500)/1E3+"px";var shadow="none";if(opts.shadow===true)shadow="0 2px 4px #000";else if(typeof opts.shadow==="string")shadow=opts.shadow;var shadows=parseBoxShadow(shadow);for(var i=0;i<opts.lines;i++){var degrees=~~(360/opts.lines*i+opts.rotate);var backgroundLine=css(document.createElement("div"),{position:"absolute",top:-opts.width/2+"px",width:opts.length+opts.width+"px",height:opts.width+"px",background:getColor(opts.fadeColor,
i),borderRadius:borderRadius,transformOrigin:"left",transform:"rotate("+degrees+"deg) translateX("+opts.radius+"px)"});var line=css(document.createElement("div"),{width:"100%",height:"100%",background:getColor(opts.color,i),borderRadius:borderRadius,boxShadow:normalizeShadow(shadows,degrees),opacity:opts.opacity});backgroundLine.appendChild(line);el.appendChild(backgroundLine)}}
function parseBoxShadow(boxShadow){var regex=/^\s*([a-zA-Z]+\s+)?(-?\d+(\.\d+)?)([a-zA-Z]*)\s+(-?\d+(\.\d+)?)([a-zA-Z]*)(.*)$/;var shadows=[];for(var _i=0,_a=boxShadow.split(",");_i<_a.length;_i++){var shadow=_a[_i];var matches=shadow.match(regex);if(matches===null)continue;var x=+matches[2];var y=+matches[5];var xUnits=matches[4];var yUnits=matches[7];if(x===0&&!xUnits)xUnits=yUnits;if(y===0&&!yUnits)yUnits=xUnits;if(xUnits!==yUnits)continue;shadows.push({prefix:matches[1]||"",x:x,y:y,xUnits:xUnits,
yUnits:yUnits,end:matches[8]})}return shadows}function normalizeShadow(shadows,degrees){var normalized=[];for(var _i=0,shadows_1=shadows;_i<shadows_1.length;_i++){var shadow=shadows_1[_i];var xy=convertOffset(shadow.x,shadow.y,degrees);normalized.push(shadow.prefix+xy[0]+shadow.xUnits+" "+xy[1]+shadow.yUnits+shadow.end)}return normalized.join(", ")}
function convertOffset(x,y,degrees){var radians=degrees*Math.PI/180;var sin=Math.sin(radians);var cos=Math.cos(radians);return[Math.round((x*cos+y*sin)*1E3)/1E3,Math.round((-x*sin+y*cos)*1E3)/1E3]};/*
 @source http://purl.eligrey.com/github/FileSaver.js/blob/master/src/FileSaver.js */
var saveAs=saveAs||function(view){if(typeof view==="undefined"||typeof navigator!=="undefined"&&/MSIE [1-9]\./.test(navigator.userAgent))return;var doc=view.document,get_URL=function(){return view.URL||view.webkitURL||view},save_link=doc.createElementNS("http://www.w3.org/1999/xhtml","a"),can_use_save_link="download"in save_link,click=function(node){var event=new MouseEvent("click");node.dispatchEvent(event)},is_safari=/constructor/i.test(view.HTMLElement)||view.safari,is_chrome_ios=/CriOS\/[\d]+/.test(navigator.userAgent),
throw_outside=function(ex){(view.setImmediate||view.setTimeout)(function(){throw ex;},0)},force_saveable_type="application/octet-stream",arbitrary_revoke_timeout=1E3*40,revoke=function(file){var revoker=function(){if(typeof file==="string")get_URL().revokeObjectURL(file);else file.remove()};setTimeout(revoker,arbitrary_revoke_timeout)},dispatch=function(filesaver,event_types,event){event_types=[].concat(event_types);var i=event_types.length;while(i--){var listener=filesaver["on"+event_types[i]];if(typeof listener===
"function")try{listener.call(filesaver,event||filesaver)}catch(ex){throw_outside(ex)}}},auto_bom=function(blob){if(/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type))return new Blob([String.fromCharCode(65279),blob],{type:blob.type});return blob},FileSaver=function(blob,name,no_auto_bom){if(!no_auto_bom)blob=auto_bom(blob);var filesaver=this,type=blob.type,force=type===force_saveable_type,object_url,dispatch_all=function(){dispatch(filesaver,"writestart progress write writeend".split(" "))},
fs_error=function(){if((is_chrome_ios||force&&is_safari)&&view.FileReader){var reader=new FileReader;reader.onloadend=function(){var url=is_chrome_ios?reader.result:reader.result.replace(/^data:[^;]*;/,"data:attachment/file;");var popup=view.open(url,"_blank");if(!popup)view.location.href=url;url=undefined;filesaver.readyState=filesaver.DONE;dispatch_all()};reader.readAsDataURL(blob);filesaver.readyState=filesaver.INIT;return}if(!object_url)object_url=get_URL().createObjectURL(blob);if(force)view.location.href=
object_url;else{var opened=view.open(object_url,"_blank");if(!opened)view.location.href=object_url}filesaver.readyState=filesaver.DONE;dispatch_all();revoke(object_url)};filesaver.readyState=filesaver.INIT;if(can_use_save_link){object_url=get_URL().createObjectURL(blob);setTimeout(function(){save_link.href=object_url;save_link.download=name;click(save_link);dispatch_all();revoke(object_url);filesaver.readyState=filesaver.DONE});return}fs_error()},FS_proto=FileSaver.prototype,saveAs=function(blob,
name,no_auto_bom){return new FileSaver(blob,name||blob.name||"download",no_auto_bom)};if(typeof navigator!=="undefined"&&navigator.msSaveOrOpenBlob)return function(blob,name,no_auto_bom){name=name||blob.name||"download";if(!no_auto_bom)blob=auto_bom(blob);return navigator.msSaveOrOpenBlob(blob,name)};FS_proto.abort=function(){};FS_proto.readyState=FS_proto.INIT=0;FS_proto.WRITING=1;FS_proto.DONE=2;FS_proto.error=FS_proto.onwritestart=FS_proto.onprogress=FS_proto.onwrite=FS_proto.onabort=FS_proto.onerror=
FS_proto.onwriteend=null;return saveAs}(typeof self!=="undefined"&&self||typeof window!=="undefined"&&window||this);var b64toBlob=function(b64Data,contentType,sliceSize){contentType=contentType||"";sliceSize=sliceSize||512;var byteCharacters=atob(b64Data);var byteArrays=[];for(var offset=0;offset<byteCharacters.length;offset+=sliceSize){var slice=byteCharacters.slice(offset,offset+sliceSize);var byteNumbers=new Array(slice.length);for(var i=0;i<slice.length;i++)byteNumbers[i]=slice.charCodeAt(i);var byteArray=new Uint8Array(byteNumbers);byteArrays.push(byteArray)}var blob=new Blob(byteArrays,{type:contentType});
return blob};/*
 
 You may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 {@link http://www.apache.org/licenses/LICENSE-2.0}
 @fileoverview Manages the dom interaction of home page.
 @version 1.0
 Last modified on 11/03/2018 
*/
var TABS_=["blocks","mbed","xml"];var selected="blocks";function resetClick(){var code="void setup() {} void loop() {}";var count=Blockly.mainWorkspace.getAllBlocks().length;if(count<2||window.confirm(Blockly.Msg.DELETE_ALL_BLOCKS.replace("%1",count))){Blockly.mainWorkspace.clear();if(window.location.hash)window.location.hash=""}renderContent()}
function uploadCode(code,callback){var target=document.getElementById("whole_table");var spinner=(new Spinner).spin(target);var url="http://127.0.0.1:8080/";var method="POST";var async=true;var request=new XMLHttpRequest;request.onreadystatechange=function(){if(request.readyState!=4)return;spinner.stop();var status=parseInt(request.status);var errorInfo=null;var json_str=null;switch(status){case 200:json_str=request.responseText;break;case 0:errorInfo="code 0\n\nCould not connect to server at "+url+
".  Is the local web server running?";break;case 400:errorInfo="code 400\n\nBuild failed - probably due to invalid source code.  Make sure that there are no missing connections in the blocks.";break;case 500:errorInfo="code 500\n\nUpload failed.  Is the Arduino connected to USB port?";break;case 501:errorInfo="code 501\n\nUpload failed.  Is 'ino' installed and in your path?  This only works on Mac OS X and Linux at this time.";break;default:errorInfo="code "+status+"\n\nUnknown error.";break}callback(status,
errorInfo,json_str)};request.open(method,url,async);request.setRequestHeader("Content-Type","text/plain;charset\x3dUTF-8");request.send(code)}
function uploadClick(){var code=Blockly.mbed.workspaceToCode();alert("Ready to upload to mbed.");uploadCode(code,function(status,errorInfo,json_str){if(status==200){var json_obj=JSON.parse(json_str);alert("Program uploaded ok, Program compiler returned "+json_obj.return_code);var blob=b64toBlob(json_obj.byte_code,"octet/stream");saveAs(blob,"project.o")}else alert("Error uploading program: "+errorInfo)})}
function tabClick(clickedName){if(document.getElementById("tab_xml").className=="tabon"){var xmlTextarea=document.getElementById("content_xml");var xmlText=xmlTextarea.innerText;var xmlDom=null;try{xmlDom=Blockly.Xml.textToDom(xmlText)}catch(e){var q=window.confirm("Error parsing XML:\n"+e+"\n\nAbandon changes?");if(!q)return}if(xmlDom){Blockly.mainWorkspace.clear();Blockly.Xml.domToWorkspace(xmlDom,Blockly.mainWorkspace)}}if(document.getElementById("tab_blocks").className=="tabon")Blockly.mainWorkspace.setVisible(false);
for(var i=0;i<TABS_.length;i++){var name=TABS_[i];document.getElementById("tab_"+name).className="taboff";document.getElementById("content_"+name).style.visibility="hidden"}selected=clickedName;document.getElementById("tab_"+clickedName).className="tabon";document.getElementById("content_"+clickedName).style.visibility="visible";renderContent();if(clickedName=="blocks")Blockly.mainWorkspace.setVisible(true);Blockly.svgResize(Blockly.mainWorkspace)}
function renderContent(){var content=document.getElementById("content_"+selected);if(content.id=="content_blocks")Blockly.mainWorkspace.render();else if(content.id=="content_xml"){var xmlTextarea=document.getElementById("content_xml");var xmlDom=Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);var xmlText=Blockly.Xml.domToPrettyText(xmlDom);xmlTextarea.innerText=xmlText;hljs.highlightBlock(xmlTextarea);xmlTextarea.focus()}else if(content.id=="content_mbed"){var mbedTextarea=document.getElementById("content_mbed");
var workspace_code=Blockly.mbed.workspaceToCode(Blockly.mainWorkspace);workspace_code=workspace_code.replace(/</g,"\x26lt;");workspace_code=workspace_code.replace(/>/g,"\x26gt;");mbedTextarea.innerHTML=workspace_code;hljs.highlightBlock(mbedTextarea);mbedTextarea.innerHTML=mbedTextarea.innerHTML.replace(/\r?\n/g,"\x3cbr/\x3e");mbedTextarea.focus()}}
function restore_blocks(){if("localStorage"in window&&window.localStorage.mbed){var xml=Blockly.Xml.textToDom(window.localStorage.mbed);Blockly.Xml.domToWorkspace(xml,Blockly.mainWorkspace)}}function backup_blocks(){if("localStorage"in window){var xml=Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);window.localStorage.setItem("mbed",Blockly.Xml.domToText(xml))}}
function bindEvent(element,name,func){if(element.addEventListener)element.addEventListener(name,func,false);else if(element.attachEvent)element.attachEvent("on"+name,func)}function auto_save_and_restore_blocks(){window.setTimeout(restore_blocks,0);bindEvent(window,"unload",backup_blocks);tabClick(selected);var loadInput=document.getElementById("load");loadInput.addEventListener("change",load,false);document.getElementById("fakeload").onclick=function(){loadInput.click()}}
function getBBox_(element){var height=element.offsetHeight;var width=element.offsetWidth;var x=0;var y=0;do{x+=element.offsetLeft;y+=element.offsetTop;element=element.offsetParent}while(element);return{height:height,width:width,x:x,y:y}}
function load(event){var files=event.target.files;if(files.length!=1)return;var reader=new FileReader;reader.onloadend=function(event){var target=event.target;if(target.readyState==2){var xml;try{xml=Blockly.Xml.textToDom(target.result)}catch(e){alert("Error parsing XML:\n"+e);return}var count=Blockly.mainWorkspace.getAllBlocks().length;if(count&&confirm('Replace existing blocks?\n"Cancel" will merge.'))Blockly.mainWorkspace.clear();Blockly.Xml.domToWorkspace(xml,Blockly.mainWorkspace)}document.getElementById("load").value=
""};reader.readAsText(files[0])}
function init(){var container=document.getElementById("content_area");var onresize=function(e){var bBox=getBBox_(container);for(var i=0;i<TABS_.length;i++){var el=document.getElementById("content_"+TABS_[i]);el.style.top=bBox.y+"px";el.style.left=bBox.x+"px";el.style.height=bBox.height+"px";el.style.height=2*bBox.height-el.offsetHeight+"px";el.style.width=bBox.width+"px";el.style.width=2*bBox.width-el.offsetWidth+"px"}if(Blockly.mainWorkspace.toolbox_.width)document.getElementById("tab_blocks").style.minWidth=Blockly.mainWorkspace.toolbox_.width-
38+"px"};window.addEventListener("resize",onresize,false);var toolbox=document.getElementById("toolbox");Blockly.inject(document.getElementById("content_blocks"),{grid:{spacing:25,length:3,colour:"#ccc",snap:true},media:"./media/",toolbox:toolbox});auto_save_and_restore_blocks();onresize();Blockly.svgResize(Blockly.mainWorkspace);var dest=unescape(location.search.replace(/^.*=/,"")).replace(/\+/g," ");if(dest)load_by_url(dest)};/*! highlight.js v9.12.0 | BSD3 License | git.io/hljslicense */
!function(e){var n="object"==typeof window&&window||"object"==typeof self&&self;"undefined"!=typeof exports?e(exports):n&&(n.hljs=e({}),"function"==typeof define&&define.amd&&define([],function(){return n.hljs}))}(function(e){function n(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function t(e){return e.nodeName.toLowerCase()}function r(e,n){var t=e&&e.exec(n);return t&&0===t.index}function a(e){return k.test(e)}function i(e){var n,t,r,i,o=e.className+" ";if(o+=e.parentNode?e.parentNode.className:"",t=B.exec(o))return w(t[1])?t[1]:"no-highlight";for(o=o.split(/\s+/),n=0,r=o.length;r>n;n++)if(i=o[n],a(i)||w(i))return i}function o(e){var n,t={},r=Array.prototype.slice.call(arguments,1);for(n in e)t[n]=e[n];return r.forEach(function(e){for(n in e)t[n]=e[n]}),t}function u(e){var n=[];return function r(e,a){for(var i=e.firstChild;i;i=i.nextSibling)3===i.nodeType?a+=i.nodeValue.length:1===i.nodeType&&(n.push({event:"start",offset:a,node:i}),a=r(i,a),t(i).match(/br|hr|img|input/)||n.push({event:"stop",offset:a,node:i}));return a}(e,0),n}function c(e,r,a){function i(){return e.length&&r.length?e[0].offset!==r[0].offset?e[0].offset<r[0].offset?e:r:"start"===r[0].event?e:r:e.length?e:r}function o(e){function r(e){return" "+e.nodeName+'="'+n(e.value).replace('"',"&quot;")+'"'}s+="<"+t(e)+E.map.call(e.attributes,r).join("")+">"}function u(e){s+="</"+t(e)+">"}function c(e){("start"===e.event?o:u)(e.node)}for(var l=0,s="",f=[];e.length||r.length;){var g=i();if(s+=n(a.substring(l,g[0].offset)),l=g[0].offset,g===e){f.reverse().forEach(u);do c(g.splice(0,1)[0]),g=i();while(g===e&&g.length&&g[0].offset===l);f.reverse().forEach(o)}else"start"===g[0].event?f.push(g[0].node):f.pop(),c(g.splice(0,1)[0])}return s+n(a.substr(l))}function l(e){return e.v&&!e.cached_variants&&(e.cached_variants=e.v.map(function(n){return o(e,{v:null},n)})),e.cached_variants||e.eW&&[o(e)]||[e]}function s(e){function n(e){return e&&e.source||e}function t(t,r){return new RegExp(n(t),"m"+(e.cI?"i":"")+(r?"g":""))}function r(a,i){if(!a.compiled){if(a.compiled=!0,a.k=a.k||a.bK,a.k){var o={},u=function(n,t){e.cI&&(t=t.toLowerCase()),t.split(" ").forEach(function(e){var t=e.split("|");o[t[0]]=[n,t[1]?Number(t[1]):1]})};"string"==typeof a.k?u("keyword",a.k):x(a.k).forEach(function(e){u(e,a.k[e])}),a.k=o}a.lR=t(a.l||/\w+/,!0),i&&(a.bK&&(a.b="\\b("+a.bK.split(" ").join("|")+")\\b"),a.b||(a.b=/\B|\b/),a.bR=t(a.b),a.e||a.eW||(a.e=/\B|\b/),a.e&&(a.eR=t(a.e)),a.tE=n(a.e)||"",a.eW&&i.tE&&(a.tE+=(a.e?"|":"")+i.tE)),a.i&&(a.iR=t(a.i)),null==a.r&&(a.r=1),a.c||(a.c=[]),a.c=Array.prototype.concat.apply([],a.c.map(function(e){return l("self"===e?a:e)})),a.c.forEach(function(e){r(e,a)}),a.starts&&r(a.starts,i);var c=a.c.map(function(e){return e.bK?"\\.?("+e.b+")\\.?":e.b}).concat([a.tE,a.i]).map(n).filter(Boolean);a.t=c.length?t(c.join("|"),!0):{exec:function(){return null}}}}r(e)}function f(e,t,a,i){function o(e,n){var t,a;for(t=0,a=n.c.length;a>t;t++)if(r(n.c[t].bR,e))return n.c[t]}function u(e,n){if(r(e.eR,n)){for(;e.endsParent&&e.parent;)e=e.parent;return e}return e.eW?u(e.parent,n):void 0}function c(e,n){return!a&&r(n.iR,e)}function l(e,n){var t=N.cI?n[0].toLowerCase():n[0];return e.k.hasOwnProperty(t)&&e.k[t]}function p(e,n,t,r){var a=r?"":I.classPrefix,i='<span class="'+a,o=t?"":C;return i+=e+'">',i+n+o}function h(){var e,t,r,a;if(!E.k)return n(k);for(a="",t=0,E.lR.lastIndex=0,r=E.lR.exec(k);r;)a+=n(k.substring(t,r.index)),e=l(E,r),e?(B+=e[1],a+=p(e[0],n(r[0]))):a+=n(r[0]),t=E.lR.lastIndex,r=E.lR.exec(k);return a+n(k.substr(t))}function d(){var e="string"==typeof E.sL;if(e&&!y[E.sL])return n(k);var t=e?f(E.sL,k,!0,x[E.sL]):g(k,E.sL.length?E.sL:void 0);return E.r>0&&(B+=t.r),e&&(x[E.sL]=t.top),p(t.language,t.value,!1,!0)}function b(){L+=null!=E.sL?d():h(),k=""}function v(e){L+=e.cN?p(e.cN,"",!0):"",E=Object.create(e,{parent:{value:E}})}function m(e,n){if(k+=e,null==n)return b(),0;var t=o(n,E);if(t)return t.skip?k+=n:(t.eB&&(k+=n),b(),t.rB||t.eB||(k=n)),v(t,n),t.rB?0:n.length;var r=u(E,n);if(r){var a=E;a.skip?k+=n:(a.rE||a.eE||(k+=n),b(),a.eE&&(k=n));do E.cN&&(L+=C),E.skip||(B+=E.r),E=E.parent;while(E!==r.parent);return r.starts&&v(r.starts,""),a.rE?0:n.length}if(c(n,E))throw new Error('Illegal lexeme "'+n+'" for mode "'+(E.cN||"<unnamed>")+'"');return k+=n,n.length||1}var N=w(e);if(!N)throw new Error('Unknown language: "'+e+'"');s(N);var R,E=i||N,x={},L="";for(R=E;R!==N;R=R.parent)R.cN&&(L=p(R.cN,"",!0)+L);var k="",B=0;try{for(var M,j,O=0;;){if(E.t.lastIndex=O,M=E.t.exec(t),!M)break;j=m(t.substring(O,M.index),M[0]),O=M.index+j}for(m(t.substr(O)),R=E;R.parent;R=R.parent)R.cN&&(L+=C);return{r:B,value:L,language:e,top:E}}catch(T){if(T.message&&-1!==T.message.indexOf("Illegal"))return{r:0,value:n(t)};throw T}}function g(e,t){t=t||I.languages||x(y);var r={r:0,value:n(e)},a=r;return t.filter(w).forEach(function(n){var t=f(n,e,!1);t.language=n,t.r>a.r&&(a=t),t.r>r.r&&(a=r,r=t)}),a.language&&(r.second_best=a),r}function p(e){return I.tabReplace||I.useBR?e.replace(M,function(e,n){return I.useBR&&"\n"===e?"<br>":I.tabReplace?n.replace(/\t/g,I.tabReplace):""}):e}function h(e,n,t){var r=n?L[n]:t,a=[e.trim()];return e.match(/\bhljs\b/)||a.push("hljs"),-1===e.indexOf(r)&&a.push(r),a.join(" ").trim()}function d(e){var n,t,r,o,l,s=i(e);a(s)||(I.useBR?(n=document.createElementNS("http://www.w3.org/1999/xhtml","div"),n.innerHTML=e.innerHTML.replace(/\n/g,"").replace(/<br[ \/]*>/g,"\n")):n=e,l=n.textContent,r=s?f(s,l,!0):g(l),t=u(n),t.length&&(o=document.createElementNS("http://www.w3.org/1999/xhtml","div"),o.innerHTML=r.value,r.value=c(t,u(o),l)),r.value=p(r.value),e.innerHTML=r.value,e.className=h(e.className,s,r.language),e.result={language:r.language,re:r.r},r.second_best&&(e.second_best={language:r.second_best.language,re:r.second_best.r}))}function b(e){I=o(I,e)}function v(){if(!v.called){v.called=!0;var e=document.querySelectorAll("pre code");E.forEach.call(e,d)}}function m(){addEventListener("DOMContentLoaded",v,!1),addEventListener("load",v,!1)}function N(n,t){var r=y[n]=t(e);r.aliases&&r.aliases.forEach(function(e){L[e]=n})}function R(){return x(y)}function w(e){return e=(e||"").toLowerCase(),y[e]||y[L[e]]}var E=[],x=Object.keys,y={},L={},k=/^(no-?highlight|plain|text)$/i,B=/\blang(?:uage)?-([\w-]+)\b/i,M=/((^(<[^>]+>|\t|)+|(?:\n)))/gm,C="</span>",I={classPrefix:"hljs-",tabReplace:null,useBR:!1,languages:void 0};return e.highlight=f,e.highlightAuto=g,e.fixMarkup=p,e.highlightBlock=d,e.configure=b,e.initHighlighting=v,e.initHighlightingOnLoad=m,e.registerLanguage=N,e.listLanguages=R,e.getLanguage=w,e.inherit=o,e.IR="[a-zA-Z]\\w*",e.UIR="[a-zA-Z_]\\w*",e.NR="\\b\\d+(\\.\\d+)?",e.CNR="(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",e.BNR="\\b(0b[01]+)",e.RSR="!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",e.BE={b:"\\\\[\\s\\S]",r:0},e.ASM={cN:"string",b:"'",e:"'",i:"\\n",c:[e.BE]},e.QSM={cN:"string",b:'"',e:'"',i:"\\n",c:[e.BE]},e.PWM={b:/\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/},e.C=function(n,t,r){var a=e.inherit({cN:"comment",b:n,e:t,c:[]},r||{});return a.c.push(e.PWM),a.c.push({cN:"doctag",b:"(?:TODO|FIXME|NOTE|BUG|XXX):",r:0}),a},e.CLCM=e.C("//","$"),e.CBCM=e.C("/\\*","\\*/"),e.HCM=e.C("#","$"),e.NM={cN:"number",b:e.NR,r:0},e.CNM={cN:"number",b:e.CNR,r:0},e.BNM={cN:"number",b:e.BNR,r:0},e.CSSNM={cN:"number",b:e.NR+"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",r:0},e.RM={cN:"regexp",b:/\//,e:/\/[gimuy]*/,i:/\n/,c:[e.BE,{b:/\[/,e:/\]/,r:0,c:[e.BE]}]},e.TM={cN:"title",b:e.IR,r:0},e.UTM={cN:"title",b:e.UIR,r:0},e.METHOD_GUARD={b:"\\.\\s*"+e.UIR,r:0},e});hljs.registerLanguage("xml",function(s){var e="[A-Za-z0-9\\._:-]+",t={eW:!0,i:/</,r:0,c:[{cN:"attr",b:e,r:0},{b:/=\s*/,r:0,c:[{cN:"string",endsParent:!0,v:[{b:/"/,e:/"/},{b:/'/,e:/'/},{b:/[^\s"'=<>`]+/}]}]}]};return{aliases:["html","xhtml","rss","atom","xjb","xsd","xsl","plist"],cI:!0,c:[{cN:"meta",b:"<!DOCTYPE",e:">",r:10,c:[{b:"\\[",e:"\\]"}]},s.C("<!--","-->",{r:10}),{b:"<\\!\\[CDATA\\[",e:"\\]\\]>",r:10},{b:/<\?(php)?/,e:/\?>/,sL:"php",c:[{b:"/\\*",e:"\\*/",skip:!0}]},{cN:"tag",b:"<style(?=\\s|>|$)",e:">",k:{name:"style"},c:[t],starts:{e:"</style>",rE:!0,sL:["css","xml"]}},{cN:"tag",b:"<script(?=\\s|>|$)",e:">",k:{name:"script"},c:[t],starts:{e:"</script>",rE:!0,sL:["actionscript","javascript","handlebars","xml"]}},{cN:"meta",v:[{b:/<\?xml/,e:/\?>/,r:10},{b:/<\?\w+/,e:/\?>/}]},{cN:"tag",b:"</?",e:"/?>",c:[{cN:"name",b:/[^\/><\s]+/,r:0},t]}]}});hljs.registerLanguage("cpp",function(t){var e={cN:"keyword",b:"\\b[a-z\\d_]*_t\\b"},r={cN:"string",v:[{b:'(u8?|U)?L?"',e:'"',i:"\\n",c:[t.BE]},{b:'(u8?|U)?R"',e:'"',c:[t.BE]},{b:"'\\\\?.",e:"'",i:"."}]},s={cN:"number",v:[{b:"\\b(0b[01']+)"},{b:"(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)"},{b:"(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"}],r:0},i={cN:"meta",b:/#\s*[a-z]+\b/,e:/$/,k:{"meta-keyword":"if else elif endif define undef warning error line pragma ifdef ifndef include"},c:[{b:/\\\n/,r:0},t.inherit(r,{cN:"meta-string"}),{cN:"meta-string",b:/<[^\n>]*>/,e:/$/,i:"\\n"},t.CLCM,t.CBCM]},a=t.IR+"\\s*\\(",c={keyword:"int float while private char catch import module export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace unsigned long volatile static protected bool template mutable if public friend do goto auto void enum else break extern using asm case typeid short reinterpret_cast|10 default double register explicit signed typename try this switch continue inline delete alignof constexpr decltype noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary atomic_bool atomic_char atomic_schar atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong atomic_ullong new throw return and or not",built_in:"std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr",literal:"true false nullptr NULL"},n=[e,t.CLCM,t.CBCM,s,r];return{aliases:["c","cc","h","c++","h++","hpp"],k:c,i:"</",c:n.concat([i,{b:"\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<",e:">",k:c,c:["self",e]},{b:t.IR+"::",k:c},{v:[{b:/=/,e:/;/},{b:/\(/,e:/\)/},{bK:"new throw return else",e:/;/}],k:c,c:n.concat([{b:/\(/,e:/\)/,k:c,c:n.concat(["self"]),r:0}]),r:0},{cN:"function",b:"("+t.IR+"[\\*&\\s]+)+"+a,rB:!0,e:/[{;=]/,eE:!0,k:c,i:/[^\w\s\*&]/,c:[{b:a,rB:!0,c:[t.TM],r:0},{cN:"params",b:/\(/,e:/\)/,k:c,r:0,c:[t.CLCM,t.CBCM,r,s,e]},t.CLCM,t.CBCM,i]},{cN:"class",bK:"class struct",e:/[{;:]/,c:[{b:/</,e:/>/,c:["self"]},t.TM]}]),exports:{preprocessor:i,strings:r,k:c}}});